#!/usr/bin/env ruby
#
# This is a hacked up version of gitdub.  Original gitdub source can be found
# at https://github.com/mavam/gitdub.  This version uses the post-receive-email
# script that comes in the git distribution instead of git-notifier:
# https://github.com/git/git/blob/master/contrib/hooks/post-receive-email
#
# It understands/uses some, but not all of the configuration YAML file that a
# stock gitdub uses.  The keys it does understand are:
#
# gitdub.directory
# gitdub.bind
# gitdub.port
# gitdub.ssl.*
# gitdub.allowed_sources
# gitdub.monitor
# notifier.to
# notifier.from
# notifier.subject
# github.id
# github.protocol
# github.to
# github.from
# github.subject
# github.uri
#
# Butchery conducted by Dave Goodell <dgoodell@cisco.com>

require 'fileutils'
require 'json'
require 'logger'
require 'sinatra/base'
require 'yaml'

class GitNotifier
  public

  def self.run(path, opts)
    current = Dir.pwd()
    success = true
    Dir.chdir(path)
    begin
      $logger.debug('> git fetch origin +refs/heads/*:refs/heads/*')
      success = system('git', 'fetch', 'origin', '+refs/heads/*:refs/heads/*')
      raise "git fetch failed in #{path}" unless success

      # Now invoke the post-receive hook to actually send the mail.  Most of
      # the configuration about who mail should be sent to, who it should come
      # from, etc. is controlled by git-config options in this repository.
      IO.popen('post-receive-email', 'r+') { |io|
        oldrev = opts['before']
        newrev = opts['after']
        refname = opts['refname']
        $logger.debug("oldrev=#{oldrev} newrev=#{newrev} refname=#{refname}")
        io.puts("#{oldrev} #{newrev} #{refname}")
        io.close_write
      }

      raise "post-receive-email failed in #{path} with args: #{args}" unless success
    rescue Exception => e
      $logger.error(e)
    end
    Dir.chdir(current)

    $logger.error('post-receive-email failed') unless success
    success
  end
end

class GitDub
  def initialize(config)
    @notifier = config['notifier']
    @github = config['github']
    @silent_init = config['gitdub']['silent_init']
    @default_protocol = config['gitdub']['default_protocol'] || 'git'

    dir = config['gitdub']['directory']
    if dir != '.'
      $logger.info("switching into working directory #{dir}")
      Dir.mkdir(dir) unless Dir.exists?(dir)
      Dir.chdir(dir)
    end
  end

  def process(push)
    opts = @notifier.clone
    url = push['repository']['url']
    user = push['repository']['owner']['name']
    repo = push['repository']['name']
    opts['link'] = push['compare']
    opts['subject'] = "[gitdub #{push['repository']['full_name']}]"
    opts['from'] = "#{push['pusher']['name']} <#{push['pusher']['email']}>"
    $logger.info("received push from #{user}/#{repo} for commits "\
                 "#{push['before'][0..5]}...#{push['after'][0..5]}")

    opts['before'] = push['before']
    opts['after'] = push['after']
    opts['refname'] = push['ref']

    @github.each do |entry|
      if "#{user}\/#{repo}" =~ Regexp.new(entry['id'])
        opts.merge!(entry.reject { |k, v| k == 'id' || k == 'protocol'})
        opts['uri'] ||= url

        entry['protocol'] ||= @default_protocol
        remote = case entry['protocol']
                 when /git/
                   push['repository']['git_url']
                 when /ssh/
                   push['repository']['ssh_url']
                 when /https/
                   push['repository']['clone_url']
                 else
                   $logger.error("invalid protocol: #{entry['protocol']}")
                   next
                 end

        dir = File.join(user, repo)
        if not Dir.exists?(dir)
          $logger.debug("> git clone --bare #{remote} #{dir}")
          if not system('git', 'clone', '--bare', remote, dir)
            $logger.error("git failed to clone repository #{user}/#{repo}")
            FileUtils.rm_rf(dir) if File.exists?(dir)
            return
          end
          # Do not keep empty user directories.
          if Dir[File.join(user, '*')].empty?
            Dir.rmdir(user)
          end
        end

        # update the git-config values that post-receive-email uses
        Dir.chdir(dir) do
          cfg = {
            'hooks.envelopesender' => opts['from'],
            'hooks.mailinglist' => opts['to'].join(','),
            'hooks.emailprefix' => opts['subject'],
            'hooks.showrev' => "t=%s; printf '#{url}/commit/%%s' \$t; echo;echo; git show -C \$t; echo;echo",
            'hooks.emailmaxlines' => '5000',
            'hooks.diffopts' => '--stat --summary --find-copies-harder',
          }
          cfg.each { |k,v|
            $logger.debug("#{user}/#{repo}: setting #{k} = #{v}")
            if not system('git', 'config', '--local', k, v)
              $logger.error("failed to set git config '#{k}' for #{user}/#{repo}")
            end
          }
          system("echo '#{user}/#{repo}' > description")
        end

        return GitNotifier.run(dir, opts)
      end
    end
    $logger.warn("no matching repository found for #{user}/#{repo}")
  end
end

class GitDubServer < Sinatra::Base
  configure do
    set(:environment, :production)
    set(:bind, settings.bind)
    set(:port, settings.port)
  end

  get '/' do
    "Use #{request.url} as WebHook URL in your github repository settings."
  end

  post '/' do
    sources = settings.allowed_sources
    if not sources.empty? and not sources.include?(request.ip)
      $logger.info("discarding request from disallowed address #{request.ip}")
      return
    end

    if not params[:payload]
      $logger.error('received POST request with empty payload')
    else
      # see this page for docs on JSON msg contents:
      # https://developer.github.com/v3/activity/events/types/#pushevent
      settings.gitdub.process(JSON.parse(params[:payload]))
    end
  end
end

def which(cmd)
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exe = "#{path}/#{cmd}"
    return exe if File.executable?(exe)
  end
  nil
end

def run(config)
  GitDubServer.set(:gitdub, GitDub.new(config))
  GitDubServer.set(:bind, config['gitdub']['bind'])
  GitDubServer.set(:port, config['gitdub']['port'])
  GitDubServer.set(:allowed_sources, config['gitdub']['allowed_sources'])

  if not config['gitdub']['ssl']['enable']
    Sinatra.new(GitDubServer).run!
  else
    require 'webrick/https'
    require 'openssl'

    cert = File.open(config['gitdub']['ssl']['cert']).read
    key = File.open(config['gitdub']['ssl']['key']).read
    webrick_options = {
      app:            GitDubServer,
      Host:           config['gitdub']['bind'],
      Port:           config['gitdub']['port'],
      Logger:         $logger,
      SSLEnable:      true,
      SSLCertificate: OpenSSL::X509::Certificate.new(cert),
      SSLPrivateKey:  OpenSSL::PKey::RSA.new(key),
      SSLCertName:    [['CN', WEBrick::Utils::getservername]]
    }

    Rack::Server.start(webrick_options)
  end
end

if __FILE__ == $0
  $logger = Logger.new(STDERR)
  $logger.formatter = proc do |severity, datetime, progname, msg|
      time = datetime.strftime('%Y-%m-%d %H:%M:%S')
      "[#{time}] #{severity}#{' ' * (5 - severity.size + 1)}gitdub | #{msg}\n"
  end

  unless which('post-receive-email')
    $logger.error('could not find post-receive-email in $PATH')
    exit 1
  end

  if ARGV.size() != 1
    STDERR.puts "usage: #{$0} <config.yml>"
    exit 1
  end

  file = File.absolute_path(ARGV[0])
  config = YAML.load_file(file)

  sinatra = Thread.new { run(config) }

  if config['gitdub']['monitor'] > 0
    last_modified = Time.at(0)
    loop do
      mtime = File.mtime(file)
      if mtime > last_modified
        last_modified = mtime
        $logger.info("re-reading configuration file")
        config = YAML.load_file(file)
        GitDubServer.set(:gitdub, GitDub.new(config))
        break if config['gitdub']['monitor'] == 0
      end

      break unless sinatra.alive?
      sleep(config['gitdub']['monitor'])
    end
  end

  sinatra.join
end
